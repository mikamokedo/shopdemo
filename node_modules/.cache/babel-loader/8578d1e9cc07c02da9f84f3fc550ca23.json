{"ast":null,"code":"import _objectSpread from \"D:\\\\Qqqq\\\\shopdemo\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { takeEvery, put, call, takeLatest, select } from 'redux-saga/effects';\nimport { change_loading_status, change_loading_status_false } from '../action/loading';\nimport { feetListProductsSuccess, feetSingleProductsSuccess } from '../action/products';\nimport { getMethod, getSingleMethod, fillterbycate, uploadImgFirebase, pushProductToFirebase } from '../api/index';\nimport { fillterTextSuccess, fillterSelectSuccess, resetfill } from '../action/fillter';\nimport * as CONSTANT from '../constant/index';\n\nfunction* getListProductsFromFirebase() {\n  yield put(change_loading_status());\n  let data = yield call(getMethod);\n  let listProducts = [];\n  data.forEach(element => {\n    let temp = element.data();\n    temp = _objectSpread({}, temp, {\n      id: element.id\n    });\n    listProducts.push(temp);\n  });\n  yield put(feetListProductsSuccess(listProducts));\n  yield put(change_loading_status_false());\n}\n\nfunction isEmpty(obj) {\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) return true;\n  }\n\n  return false;\n}\n\nfunction* feetSingleProductFirebase(idSingle) {\n  yield put(change_loading_status());\n  const id = idSingle.payload.id;\n  let data = yield call(getSingleMethod, id);\n  yield put(feetSingleProductsSuccess(data));\n  yield put(change_loading_status_false());\n}\n\nfunction* addFillterTexttostore(value) {\n  yield put(fillterTextSuccess(value.payload));\n}\n\nfunction* addFillterSelecttostore(value) {\n  yield put(fillterSelectSuccess(value.payload));\n}\n\nfunction* submitFillterButton() {\n  const textSearch = yield select(state => state.fillterValueText);\n  const cateSearch = yield select(state => state.fillterValueSelect);\n\n  if (isEmpty(cateSearch)) {\n    let data = yield call(fillterbycate, cateSearch.fillCate);\n\n    if (cateSearch.fillCate !== \"all\") {\n      if (isEmpty(textSearch)) {\n        yield put(change_loading_status());\n        let data2 = data.filter(value => {\n          return value.name.trim().toLowerCase().includes(textSearch.fillerName.trim().toLowerCase());\n        });\n        yield put(feetListProductsSuccess(data2));\n        yield put(resetfill());\n        yield put(change_loading_status_false());\n      } else {\n        yield put(feetListProductsSuccess(data));\n        yield put(resetfill());\n      }\n    } else {\n      if (isEmpty(textSearch)) {\n        yield put(change_loading_status());\n        let data2 = data.filter(value => {\n          return value.name.trim().toLowerCase().includes(textSearch.fillerName.trim().toLowerCase());\n        });\n        yield put(feetListProductsSuccess(data2));\n        yield put(resetfill());\n        yield put(change_loading_status_false());\n      } else {\n        yield put(change_loading_status());\n        let data = yield call(getMethod);\n        let listProducts = [];\n        data.forEach(element => {\n          let temp = element.data();\n          temp = _objectSpread({}, temp, {\n            id: element.id\n          });\n          listProducts.push(temp);\n        });\n        yield put(feetListProductsSuccess(listProducts));\n        yield put(resetfill());\n        yield put(change_loading_status_false());\n      }\n    }\n  } else if (isEmpty(textSearch)) {\n    yield put(change_loading_status());\n    let data = yield select(state => state.ListProducts);\n    let data2 = data.filter(value => {\n      return value.name.trim().toLowerCase().includes(textSearch.fillerName.trim().toLowerCase());\n    });\n    yield put(feetListProductsSuccess(data2));\n    yield put(resetfill());\n    yield put(change_loading_status_false());\n  }\n}\n\nfunction* pustToFireBase(item) {\n  const fileImg = item.payload.item.filechoice;\n  let url = yield call(uploadImgFirebase, fileImg);\n  let itemnoUrl = yield select(state => state.itemadd);\n  delete itemnoUrl.filechoice;\n  itemnoUrl.url = url;\n  yield call(pushProductToFirebase, itemnoUrl);\n}\n\nfunction* rootSaga() {\n  yield takeEvery(CONSTANT.FEET_LIST_PRODUCTS, getListProductsFromFirebase);\n  yield takeEvery(CONSTANT.FEET_SINGLE_PRODUCTS, feetSingleProductFirebase);\n  yield takeLatest(CONSTANT.ADD_FILLTER_TEXT, addFillterTexttostore);\n  yield takeLatest(CONSTANT.ADD_FILLTER_SELECT, addFillterSelecttostore);\n  yield takeLatest(CONSTANT.SUBMIT_SEARCH, submitFillterButton);\n  yield takeLatest(CONSTANT.PUSH_ITEM_TO_STORE, pustToFireBase);\n}\n\nexport default rootSaga;","map":{"version":3,"sources":["D:/Qqqq/shopdemo/src/reduxSaga/index.js"],"names":["takeEvery","put","call","takeLatest","select","change_loading_status","change_loading_status_false","feetListProductsSuccess","feetSingleProductsSuccess","getMethod","getSingleMethod","fillterbycate","uploadImgFirebase","pushProductToFirebase","fillterTextSuccess","fillterSelectSuccess","resetfill","CONSTANT","getListProductsFromFirebase","data","listProducts","forEach","element","temp","id","push","isEmpty","obj","key","hasOwnProperty","feetSingleProductFirebase","idSingle","payload","addFillterTexttostore","value","addFillterSelecttostore","submitFillterButton","textSearch","state","fillterValueText","cateSearch","fillterValueSelect","fillCate","data2","filter","name","trim","toLowerCase","includes","fillerName","ListProducts","pustToFireBase","item","fileImg","filechoice","url","itemnoUrl","itemadd","rootSaga","FEET_LIST_PRODUCTS","FEET_SINGLE_PRODUCTS","ADD_FILLTER_TEXT","ADD_FILLTER_SELECT","SUBMIT_SEARCH","PUSH_ITEM_TO_STORE"],"mappings":"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","sourcesContent":["import {takeEvery,put,call,takeLatest,select} from 'redux-saga/effects';\r\nimport {change_loading_status,change_loading_status_false} from '../action/loading';\r\nimport {feetListProductsSuccess,feetSingleProductsSuccess} from '../action/products';\r\nimport {getMethod,getSingleMethod,fillterbycate,uploadImgFirebase,pushProductToFirebase} from '../api/index';\r\nimport {fillterTextSuccess,fillterSelectSuccess,resetfill} from '../action/fillter';\r\nimport * as CONSTANT from '../constant/index';\r\n\r\n\r\nfunction* getListProductsFromFirebase(){\r\n    yield put(change_loading_status());\r\n    let data = yield call(getMethod);\r\n    let listProducts = [];\r\n    data.forEach(element => {\r\n        let temp  = element.data();\r\n         temp =   {...temp,id:element.id}\r\n        listProducts.push(temp);\r\n       });\r\n       yield put(feetListProductsSuccess(listProducts));\r\n       yield put(change_loading_status_false());\r\n\r\n}\r\n\r\nfunction isEmpty(obj) {\r\n    for(var key in obj) {\r\n        if(obj.hasOwnProperty(key))\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nfunction* feetSingleProductFirebase(idSingle){\r\n    yield put(change_loading_status());\r\n    const id = idSingle.payload.id;\r\n    let data = yield call(getSingleMethod,id);\r\n    yield put(feetSingleProductsSuccess(data));\r\n    yield put(change_loading_status_false());\r\n}\r\nfunction* addFillterTexttostore(value){\r\n    yield put(fillterTextSuccess(value.payload));\r\n    \r\n\r\n}\r\n\r\nfunction* addFillterSelecttostore(value){\r\n   yield put(fillterSelectSuccess(value.payload));\r\n}\r\nfunction* submitFillterButton(){\r\n    const textSearch = yield select(state => state.fillterValueText);\r\n    const cateSearch = yield select(state => state.fillterValueSelect);\r\n  \r\n   if(isEmpty(cateSearch)){\r\n    let data = yield call(fillterbycate,cateSearch.fillCate);\r\n    if(cateSearch.fillCate !== \"all\"){\r\n    if(isEmpty(textSearch)){\r\n        yield put(change_loading_status());\r\n        let data2 = data.filter((value) =>{\r\n            return value.name.trim().toLowerCase().includes(textSearch.fillerName.trim().toLowerCase());\r\n        })\r\n        yield put(feetListProductsSuccess(data2));\r\n        yield put(resetfill());\r\n        yield put(change_loading_status_false());\r\n    }\r\n      else{\r\n        yield put(feetListProductsSuccess(data));\r\n        yield put(resetfill());\r\n      }}\r\n      else{\r\n        if(isEmpty(textSearch)){\r\n            yield put(change_loading_status());\r\n            let data2 = data.filter((value) =>{\r\n                return value.name.trim().toLowerCase().includes(textSearch.fillerName.trim().toLowerCase());\r\n            })\r\n            yield put(feetListProductsSuccess(data2));\r\n            yield put(resetfill());\r\n            yield put(change_loading_status_false());\r\n        \r\n        }\r\n        else{\r\n            yield put(change_loading_status());\r\n            let data = yield call(getMethod);\r\n            let listProducts = [];\r\n            data.forEach(element => {\r\n                let temp  = element.data();\r\n                 temp =   {...temp,id:element.id}\r\n                listProducts.push(temp);\r\n               });\r\n            yield put(feetListProductsSuccess(listProducts));\r\n            yield put(resetfill());\r\n            yield put(change_loading_status_false());\r\n          }\r\n      }\r\n   }\r\n   else if(isEmpty(textSearch)){\r\n    yield put(change_loading_status());   \r\n    let data = yield select(state => state.ListProducts);\r\n    let data2 = data.filter((value) =>{\r\n        return value.name.trim().toLowerCase().includes(textSearch.fillerName.trim().toLowerCase());\r\n    })\r\n    yield put(feetListProductsSuccess(data2));\r\n    yield put(resetfill());\r\n    yield put(change_loading_status_false());\r\n    }\r\n}\r\nfunction * pustToFireBase (item){\r\n    const fileImg = item.payload.item.filechoice;\r\n    let url = yield call(uploadImgFirebase,fileImg);\r\n   let itemnoUrl =  yield select(state => state.itemadd);\r\n   delete itemnoUrl.filechoice;\r\n   itemnoUrl.url = url;\r\n   yield call(pushProductToFirebase,itemnoUrl);\r\n \r\n \r\n}\r\n\r\n\r\n\r\n\r\nfunction * rootSaga (){\r\n    yield takeEvery(CONSTANT.FEET_LIST_PRODUCTS,getListProductsFromFirebase);\r\n    yield takeEvery(CONSTANT.FEET_SINGLE_PRODUCTS,feetSingleProductFirebase);\r\n    yield takeLatest(CONSTANT.ADD_FILLTER_TEXT,addFillterTexttostore);\r\n    yield takeLatest(CONSTANT.ADD_FILLTER_SELECT,addFillterSelecttostore);\r\n    yield takeLatest(CONSTANT.SUBMIT_SEARCH,submitFillterButton);\r\n    yield takeLatest(CONSTANT.PUSH_ITEM_TO_STORE,pustToFireBase);\r\n}\r\n\r\nexport default rootSaga;"]},"metadata":{},"sourceType":"module"}