{"ast":null,"code":"import _objectSpread from \"D:\\\\Qqqq\\\\shopdemo\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport * as CONSTANT from '../constant/index';\nconst InitialState = localStorage.getItem('cart') ? JSON.parse(localStorage.getItem('cart')) : [];\n\nconst findIndex = (item, state) => {\n  let result = -1;\n\n  if (state.length > 0) {\n    state.forEach((element, key) => {\n      if (element.id === item.id) {\n        result = key;\n      }\n    });\n  }\n\n  return result;\n};\n\nconst addToCart = (state = InitialState, action) => {\n  switch (action.type) {\n    case CONSTANT.ADDTO_CART:\n      let item = action.payload.item;\n      let temp = state;\n      let index = findIndex(item, state);\n\n      if (index === -1) {\n        item = _objectSpread({}, item, {\n          buy: 1\n        });\n        temp.push(item);\n        state = temp;\n        localStorage.setItem('cart', JSON.stringify(temp));\n        return [...state];\n      } else {\n        state[index].buy += 1;\n        localStorage.setItem('cart', JSON.stringify(state));\n        return [...state];\n      }\n\n    case CONSTANT.EARSE_CART:\n      state = [];\n      localStorage.removeItem('cart');\n      return [...state];\n\n    case CONSTANT.DELETE_CART:\n      let item2 = action.payload.item;\n      let index2 = findIndex(item2, state);\n\n      if (index2 !== -1) {\n        let temp2 = state;\n        temp2.splice(index2, 1);\n        state = temp2;\n        return [...state];\n      }\n\n      break;\n\n    default:\n      return state;\n  }\n};\n\nexport default addToCart;","map":{"version":3,"sources":["D:/Qqqq/shopdemo/src/reducer/addcart.js"],"names":["CONSTANT","InitialState","localStorage","getItem","JSON","parse","findIndex","item","state","result","length","forEach","element","key","id","addToCart","action","type","ADDTO_CART","payload","temp","index","buy","push","setItem","stringify","EARSE_CART","removeItem","DELETE_CART","item2","index2","temp2","splice"],"mappings":";AACA,OAAO,KAAKA,QAAZ,MAA0B,mBAA1B;AACA,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,IAA+BC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAA/B,GAA0E,EAA/F;;AACA,MAAMG,SAAS,GAAG,CAACC,IAAD,EAAMC,KAAN,KAAe;AAC7B,MAAIC,MAAM,GAAG,CAAC,CAAd;;AACA,MAAGD,KAAK,CAACE,MAAN,GAAe,CAAlB,EAAoB;AAChBF,IAAAA,KAAK,CAACG,OAAN,CAAc,CAACC,OAAD,EAASC,GAAT,KAAgB;AAC1B,UAAGD,OAAO,CAACE,EAAR,KAAeP,IAAI,CAACO,EAAvB,EAA0B;AACtBL,QAAAA,MAAM,GAAGI,GAAT;AACH;AACJ,KAJD;AAKH;;AACD,SAAOJ,MAAP;AACH,CAVD;;AAWA,MAAMM,SAAS,GAAG,CAACP,KAAK,GAAGP,YAAT,EAAuBe,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKjB,QAAQ,CAACkB,UAAd;AACC,UAAIX,IAAI,GAAIS,MAAM,CAACG,OAAP,CAAeZ,IAA3B;AACA,UAAIa,IAAI,GAAGZ,KAAX;AACA,UAAIa,KAAK,GAAGf,SAAS,CAACC,IAAD,EAAMC,KAAN,CAArB;;AACG,UAAGa,KAAK,KAAK,CAAC,CAAd,EAAgB;AACdd,QAAAA,IAAI,qBAAOA,IAAP;AAAYe,UAAAA,GAAG,EAAG;AAAlB,UAAJ;AACEF,QAAAA,IAAI,CAACG,IAAL,CAAUhB,IAAV;AACAC,QAAAA,KAAK,GAAGY,IAAR;AACAlB,QAAAA,YAAY,CAACsB,OAAb,CAAqB,MAArB,EAA4BpB,IAAI,CAACqB,SAAL,CAAeL,IAAf,CAA5B;AACA,eAAO,CAAC,GAAGZ,KAAJ,CAAP;AACF,OANF,MAOC;AACEA,QAAAA,KAAK,CAACa,KAAD,CAAL,CAAaC,GAAb,IAAoB,CAApB;AACApB,QAAAA,YAAY,CAACsB,OAAb,CAAqB,MAArB,EAA4BpB,IAAI,CAACqB,SAAL,CAAejB,KAAf,CAA5B;AACA,eAAO,CAAC,GAAGA,KAAJ,CAAP;AACL;;AACD,SAAKR,QAAQ,CAAC0B,UAAd;AACGlB,MAAAA,KAAK,GAAG,EAAR;AACAN,MAAAA,YAAY,CAACyB,UAAb,CAAwB,MAAxB;AACA,aAAO,CAAC,GAAGnB,KAAJ,CAAP;;AACH,SAAKR,QAAQ,CAAC4B,WAAd;AACG,UAAIC,KAAK,GAAIb,MAAM,CAACG,OAAP,CAAeZ,IAA5B;AACA,UAAIuB,MAAM,GAAGxB,SAAS,CAACuB,KAAD,EAAOrB,KAAP,CAAtB;;AAED,UAAGsB,MAAM,KAAK,CAAC,CAAf,EAAiB;AAChB,YAAIC,KAAK,GAAGvB,KAAZ;AACAuB,QAAAA,KAAK,CAACC,MAAN,CAAaF,MAAb,EAAoB,CAApB;AACAtB,QAAAA,KAAK,GAAGuB,KAAR;AACG,eAAO,CAAC,GAAGvB,KAAJ,CAAP;AACH;;AACD;;AACH;AACI,aAAOA,KAAP;AAjCR;AAmCH,CApCD;;AAsCA,eAAeO,SAAf","sourcesContent":["\r\nimport * as CONSTANT from '../constant/index';\r\nconst InitialState = localStorage.getItem('cart') ? JSON.parse(localStorage.getItem('cart')) : [];\r\nconst findIndex = (item,state) =>{\r\n    let result = -1;\r\n    if(state.length > 0){\r\n        state.forEach((element,key) =>{\r\n            if(element.id === item.id){\r\n                result = key\r\n            }     \r\n        })\r\n    }\r\n    return result;\r\n}\r\nconst addToCart = (state = InitialState, action) => {\r\n    switch (action.type) {\r\n        case CONSTANT.ADDTO_CART:\r\n         let item  = action.payload.item;\r\n         let temp = state;\r\n         let index = findIndex(item,state);\r\n            if(index === -1){\r\n              item = {...item,buy : 1}\r\n                temp.push(item);\r\n                state = temp;\r\n                localStorage.setItem('cart',JSON.stringify(temp));\r\n                return [...state];\r\n             }\r\n         else{\r\n               state[index].buy += 1;  \r\n               localStorage.setItem('cart',JSON.stringify(state));\r\n               return [...state];\r\n         }\r\n         case CONSTANT.EARSE_CART:\r\n            state = [];\r\n            localStorage.removeItem('cart');\r\n            return [...state];\r\n         case CONSTANT.DELETE_CART:\r\n            let item2  = action.payload.item;\r\n            let index2 = findIndex(item2,state);\r\n\r\n           if(index2 !== -1){\r\n            let temp2 = state;\r\n            temp2.splice(index2,1);\r\n            state = temp2;\r\n               return [...state]\r\n           }\r\n           break;\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default addToCart;\r\n"]},"metadata":{},"sourceType":"module"}